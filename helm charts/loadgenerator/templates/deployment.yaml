apiVersion: apps/v1
kind: Deployment
metadata:
  name: loadgenerator
  namespace: {{ .Values.namespace }}
  labels:
    app: loadgenerator
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: loadgenerator
  template:
    metadata:
      labels:
        app: loadgenerator
      annotations:
        sidecar.istio.io/rewriteAppHTTPProbers: "true"
    spec:
      serviceAccountName: loadgenerator
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      restartPolicy: {{ .Values.restartPolicy }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsGroup: {{ .Values.securityContext.runAsGroup }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      initContainers:
      - name: frontend-check
        image: "{{ .Values.initContainer.image.repository }}:{{ .Values.initContainer.image.tag }}"
        imagePullPolicy: {{ .Values.initContainer.image.pullPolicy }}
        command:
        - /bin/sh
        - -exc
        - |
          MAX_RETRIES={{ .Values.initContainer.maxRetries }}
          RETRY_INTERVAL={{ .Values.initContainer.retryInterval }}
          for i in $(seq 1 $MAX_RETRIES); do
            echo "Attempt $i: Pinging frontend: {{ .Values.initContainer.frontendAddress }}..."
            STATUSCODE=$(wget --server-response http://{{ .Values.initContainer.frontendAddress }} 2>&1 | awk '/^  HTTP/{print $2}')
            if [ $STATUSCODE -eq 200 ]; then
                echo "Frontend is reachable."
                exit 0
            fi
            echo "Error: Could not reach frontend - Status code: $STATUSCODE"
            sleep $RETRY_INTERVAL
          done
          echo "Failed to reach frontend after $MAX_RETRIES attempts."
          exit 1
        securityContext:
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          capabilities:
            drop: {{ toYaml .Values.securityContext.capabilities.drop | nindent 12 }}
          privileged: {{ .Values.securityContext.privileged }}
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}
        env:
        - name: FRONTEND_ADDR
          value: "{{ .Values.env.FRONTEND_ADDR }}"
      containers:
      - name: main
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
        - name: FRONTEND_ADDR
          value: "{{ .Values.env.FRONTEND_ADDR }}"
        - name: USERS
          value: "{{ .Values.env.USERS }}"
        - name: RATE
          value: "{{ .Values.env.RATE }}"
        resources:
          requests:
            cpu: {{ .Values.resources.requests.cpu }}
            memory: {{ .Values.resources.requests.memory }}
          limits:
            cpu: {{ .Values.resources.limits.cpu }}
            memory: {{ .Values.resources.limits.memory }}
        securityContext:
          allowPrivilegeEscalation: {{ .Values.securityContext.allowPrivilegeEscalation }}
          capabilities:
            drop: {{ toYaml .Values.securityContext.capabilities.drop | nindent 12 }}
          privileged: {{ .Values.securityContext.privileged }}
          readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem }}