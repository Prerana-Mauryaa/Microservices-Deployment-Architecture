pipeline {
    agent any

    parameters {
        string(name: 'DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Tag for Docker image')
    }

    environment {
        DOCKER_IMAGE_NAME = 'preranamauryaa/microservice-checkoutservice' 
        REGISTRY_CREDENTIAL = 'dockerhub' 
        HELM_CHART_NAME = 'checkout-service'
        NAMESPACE= 'checkoutservice'
        DOCKERFILE_DIR = './microservices/checkoutservice/'
        RELEASE_NAME = 'checkoutservice'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone Repo') {
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: '*/master']], 
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout']
                    ],
                    userRemoteConfigs: [
                        [credentialsId: 'a0935f93-5543-4c4f-b87f-abdcf96049f8', url: 'git@github.com:Prerana-Mauryaa/microservices-project.git']
                    ]
                ]
            }
        }
        stage('Build and Push Docker Image') {
            steps {
                script {
                    echo 'Building and pushing the Docker image to Docker Hub'
                    dir(DOCKERFILE_DIR) {
                        dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                        
                        docker.withRegistry('', REGISTRY_CREDENTIAL) {
                            dockerImage.push()
                        }
                    }
                }
            }
        }

        stage('Install Helm Chart') {
            steps {
                script {
                    sh "helm upgrade --install  ${RELEASE_NAME} ./helm-charts/${HELM_CHART_NAME} \
                        --namespace ${NAMESPACE} \
                        --set image.tag=${params.DOCKER_IMAGE_TAG}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}