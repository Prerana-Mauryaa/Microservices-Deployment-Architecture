pipeline {
    agent any

    parameters {
        string(name: 'STABLE_DOCKER_IMAGE_TAG', defaultValue: 'latest', description: 'Tag for Docker image')
        booleanParam(name: 'canaryEnabled', defaultValue: false, description: 'Enable Canary Deployment')
        string(name: 'CANARY_DOCKER_IMAGE_TAG', defaultValue: '', description: 'Tag for Canary Docker image (only required if canaryEnabled is true)')
        booleanParam(name: 'ROLLBACK', defaultValue: false, description: 'Rollback to previous Helm release revision')
    }

    environment {
        DOCKER_IMAGE_NAME = 'preranamauryaa/microservice-frontendservice' 
        REGISTRY_CREDENTIAL = 'dockerhub' 
        HELM_CHART_NAME = 'frontend-service'
        NAMESPACE= 'frontend'
        DOCKERFILE_DIR = './microservices/frontend/'
        CANARY_RELEASE_NAME="frontend-service-canary"
        CANARY_HELM_PATH="./canary-helm-charts/canary"
        HOST="frontend.frontend.svc.cluster.local"
        RELEASE_NAME="frontend"

    }

    stages {
        stage('Clean Workspace') {
            when {
                expression { !params.ROLLBACK }
            }
            steps {
                cleanWs()
            }
        }

        stage('Clone Repo') {
            when {
                expression { !params.ROLLBACK }
            }
            steps {
                checkout scm: [
                    $class: 'GitSCM',
                    branches: [[name: '*/master']], 
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [
                        [$class: 'CleanBeforeCheckout']
                    ],
                    userRemoteConfigs: [
                        [credentialsId: 'a0935f93-5543-4c4f-b87f-abdcf96049f8', url: 'git@github.com:Prerana-Mauryaa/microservices-project.git']
                    ]
                ]
            }
        }
        stage('Build and Push Docker Image') {
            when {
                expression { !params.ROLLBACK }
            }
            steps {
                script {
                    echo 'Building and pushing the Docker image to Docker Hub'
                    dir(DOCKERFILE_DIR) {
                        def dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${STABLE_DOCKER_IMAGE_TAG}")

                        docker.withRegistry('', REGISTRY_CREDENTIAL) {
                            dockerImage.push()
                        }

                        if (params.canaryEnabled && params.CANARY_DOCKER_IMAGE_TAG?.trim()) {
                            echo 'Building and pushing the Canary Docker image'
                            def canaryDockerImage = docker.build("${DOCKER_IMAGE_NAME}:${params.CANARY_DOCKER_IMAGE_TAG}")
                            canaryDockerImage.push()
                        }
                    }
                }
            }
        }
        stage('Install Canary Helm Chart') {
            when {
                expression { !params.ROLLBACK && params.canaryEnabled && params.CANARY_DOCKER_IMAGE_TAG?.trim() }
            }
            steps {
                script {
                    echo 'Installing Canary Helm chart'
                    sh "helm upgrade --install ${CANARY_RELEASE_NAME} ${CANARY_HELM_PATH} \
                        --namespace ${NAMESPACE} \
                        --set defaults.host=${HOST}\
                        --set defaults.namespace=${NAMESPACE}"
                }
            }
        }

        stage('Install Business-Service Helm Chart') {
            when {
                expression { !params.ROLLBACK }
            }
            steps {
                script {
                    def helmCommand = "helm upgrade --install ${RELEASE_NAME} ./helm-charts/${HELM_CHART_NAME} \
                                        --namespace ${NAMESPACE} \
                                        --set stable.image.tag=${params.STABLE_DOCKER_IMAGE_TAG}"

                    if (params.canaryEnabled && params.CANARY_DOCKER_IMAGE_TAG?.trim()) {
                        helmCommand += " \
                            --set canary.image.tag=${params.CANARY_DOCKER_IMAGE_TAG} \
                            --set canary.replicaCount=1"
                    }

                    echo "Executing Helm command: ${helmCommand}"
                    sh helmCommand
                }
            }
        }
        stage('Rollback Release') {
            when {
                expression { params.ROLLBACK }
            }
            steps {
                script {
                    echo 'Rolling back to previous Helm release revision...'
                    sh '''
                        PREVIOUS_REVISION=$(helm history ${RELEASE_NAME} -n ${NAMESPACE} | tail -n 2 | head -n 1 | awk '{print $1}')
                        helm rollback ${RELEASE_NAME} $PREVIOUS_REVISION -n ${NAMESPACE}
                    '''
                }
            }

        }
    }

    post {
        always {
            cleanWs()
        }
    }
}